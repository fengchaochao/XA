package com.prj.utils.ping;

import java.util.HashMap;
import java.util.Map;

import com.pingplusplus.Pingpp;
import com.pingplusplus.exception.APIConnectionException;
import com.pingplusplus.exception.APIException;
import com.pingplusplus.exception.AuthenticationException;
import com.pingplusplus.exception.ChannelException;
import com.pingplusplus.exception.InvalidRequestException;
import com.pingplusplus.exception.PingppException;
import com.pingplusplus.exception.RateLimitException;
import com.pingplusplus.model.Charge;
import com.pingplusplus.model.ChargeCollection;


import com.prj.utils.encryption.ShiroEncryption;


/**
 * Charge 对象相关示例
 * 
 * @author sunkai
 * 
 *         该实例程序演示了如何从 ping++ 服务器获得 charge ，查询 charge。
 * 
 *         开发者需要填写 apiKey 和 appId , apiKey 可以在 ping++ 管理平台【应用信息里面查看】
 * 
 *         apiKey 有 TestKey 和 LiveKey 两种。
 * 
 *         TestKey 模式下不会产生真实的交易。
 */
public class ChargeExample {

	/**
	 * pingpp 管理平台对应的应用 ID
	 */
	public static String appId = PayConfiger.appId;
	public static String apiKey = PayConfiger.apiKey;

	public static Charge getPay(String orderno, Double amount, String ip,
			String channel, String msg, String f_no)
			throws AuthenticationException, InvalidRequestException,
			APIConnectionException, APIException, ChannelException,
			RateLimitException {

		Pingpp.apiKey = apiKey;
		Pingpp.privateKey = PayConfiger.privateKey;

		ChargeExample ce = new ChargeExample();
		return ce.charge(orderno, amount, ip, channel, msg, f_no);
	}

	/**
	 * 创建 Charge
	 * 
	 * 创建 Charge 用户需要组装一个 map 对象作为参数传递给 Charge.create(); map
	 * 里面参数的具体说明请参考：https://pingxx.com/document/api#api-c-new
	 * 
	 * @return
	 * @throws RateLimitException
	 * @throws ChannelException
	 * @throws APIException
	 * @throws APIConnectionException
	 * @throws InvalidRequestException
	 * @throws AuthenticationException
	 */
	public Charge charge(String orderno, Double amount, String ip,
			String channel, String msg, String f_no)
			throws AuthenticationException, InvalidRequestException,
			APIConnectionException, APIException, ChannelException,
			RateLimitException {
		Charge charge = null;
		Map<String, Object> chargeParams = new HashMap<String, Object>();
		chargeParams.put("order_no", orderno);
		chargeParams.put("amount", amount);// 订单总金额, 人民币单位：分（如订单总金额为 1 元，此处请填
											// 100）
		Map<String, String> app = new HashMap<String, String>();
		app.put("id", PayConfiger.appId);

		chargeParams.put("app", app);
		chargeParams.put("channel", channel);
		chargeParams.put("currency", "cny");
		chargeParams.put("client_ip", ip);
		chargeParams.put("subject", f_no);

		/**
		 * 回调加密
		 */
		String hex = ShiroEncryption.encryption(orderno,
				PayConfiger.hookspublickey);

		chargeParams.put("body", msg + "cm:" + hex);
		charge = Charge.create(chargeParams);
		// 此处的charge toString之后就是正确的json格式不用额外转换，直接回传给app就行。
		return charge;
	}

	/**
	 * 查询 Charge
	 * 
	 * 该接口根据 charge Id 查询对应的 charge 。
	 * 参考文档：https://pingxx.com/document/api#api-c-inquiry
	 * 
	 * 该接口可以传递一个 expand ， 返回的 charge 中的 app 会变成 app 对象。 参考文档：
	 * https://pingxx.com/document/api#api-expanding
	 * 
	 * @param id
	 */
	public void retrieve(String id) {
		try {
			Map<String, Object> param = new HashMap<String, Object>();
			Charge charge = Charge.retrieve(id);
			System.out.println(charge);

		} catch (PingppException e) {
			e.printStackTrace();
		}
	}

	/**
	 * 分页查询Charge
	 * 
	 * 该接口为批量查询接口，默认一次查询10条。 用户可以通过添加 limit 参数自行设置查询数目，最多一次不能超过 100 条。
	 * 
	 * 该接口同样可以使用 expand 参数。
	 * 
	 * @return
	 */
	public ChargeCollection all() {
		ChargeCollection chargeCollection = null;
		Map<String, Object> chargeParams = new HashMap<String, Object>();
		chargeParams.put("limit", 3);

		try {
			chargeCollection = Charge.all(chargeParams);
			System.out.println(chargeCollection);
		} catch (AuthenticationException e) {
			e.printStackTrace();
		} catch (InvalidRequestException e) {
			e.printStackTrace();
		} catch (APIConnectionException e) {
			e.printStackTrace();
		} catch (APIException e) {
			e.printStackTrace();
		} catch (ChannelException e) {
			// TODO Auto-generated catch block
			e.printStackTrace();
		} catch (RateLimitException e) {
			// TODO Auto-generated catch block
			e.printStackTrace();
		}
		return chargeCollection;
	}

	public static void main(String[] args) {
		/*try {
			String res = getPay("201782112354", 100.0, "127.0.0.1", "alipay",
					"Test pay", "XX");
			
		} catch (AuthenticationException | InvalidRequestException
				| APIConnectionException | APIException | ChannelException
				| RateLimitException e) {
			// TODO Auto-generated catch block
			e.printStackTrace();
		}*/
	}
}
