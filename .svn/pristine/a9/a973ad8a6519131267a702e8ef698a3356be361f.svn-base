package com.prj.utils.qrCodeUtli;

/**
 * @author: Fengc
 * @date:2017-7-18 下午2:57:51
 * @version :0.0.1
 * @dis:商家和消费商二维码生成
 */
import java.awt.BasicStroke;
import java.awt.Color;
import java.awt.Font;
import java.awt.Graphics;
import java.awt.Graphics2D;
import java.awt.Image;
import java.awt.image.BufferedImage;
import java.io.File;
import java.io.FileOutputStream;
import java.io.IOException;
import java.io.OutputStream;
import java.util.HashMap;
import java.util.Map;

import javax.imageio.ImageIO;

import com.google.zxing.BarcodeFormat;
import com.google.zxing.EncodeHintType;
import com.google.zxing.MultiFormatWriter;
import com.google.zxing.common.BitMatrix;
import com.google.zxing.qrcode.decoder.ErrorCorrectionLevel;
import com.sun.image.codec.jpeg.JPEGCodec;
import com.sun.image.codec.jpeg.JPEGImageEncoder;

public final class MatrixToImageWriter {

	private static final int BLACK = 0xFF000000;
	private static final int WHITE = 0xFFFFFFFF;

	private MatrixToImageWriter() {
	}

	public static BufferedImage toBufferedImage(BitMatrix matrix) {
		int width = matrix.getWidth();
		int height = matrix.getHeight();
		BufferedImage image = new BufferedImage(width, height,
				BufferedImage.TYPE_INT_RGB);
		for (int x = 0; x < width; x++) {
			for (int y = 0; y < height; y++) {
				image.setRGB(x, y, matrix.get(x, y) ? BLACK : WHITE);
			}
		}
		return image;
	}

	public static void writeToFile(BitMatrix matrix, String format, File file)
			throws IOException {
		BufferedImage image = toBufferedImage(matrix);
		if (!ImageIO.write(image, format, file)) {
			throw new IOException("Could not write an image of format "
					+ format + " to " + file);
		}
	}

	public static void writeToStream(BitMatrix matrix, String format,
			OutputStream stream) throws IOException {
		BufferedImage image = toBufferedImage(matrix);
		if (!ImageIO.write(image, format, stream)) {
			throw new IOException("Could not write an image of format "
					+ format);
		}
	}

	/**
	 * 给二维码图片添加Logo
	 * 
	 * @param qrPic
	 * @param logoPic
	 */
	public static void addLogo_QRCode(File qrPic, File logoPic,
			LogoConfig logoConfig) {
		try {
			if (!qrPic.isFile() || !logoPic.isFile()) {
				System.out.print("file not find !");
				System.exit(0);
			}

			/**
			 * 读取二维码图片，并构建绘图对象
			 */
			BufferedImage image = ImageIO.read(qrPic);
			Graphics2D g = image.createGraphics();

			/**
			 * 读取Logo图片
			 */
			BufferedImage logo = ImageIO.read(logoPic);

			int widthLogo = image.getWidth() / logoConfig.getLogoPart();
			// int heightLogo = image.getHeight()/logoConfig.getLogoPart();
			int heightLogo = image.getWidth() / logoConfig.getLogoPart(); // 保持二维码是正方形的

			// 计算图片放置位置
			int x = (image.getWidth() - widthLogo) / 2;
			int y = (image.getHeight() - heightLogo) / 2;

			// 开始绘制图片
			g.drawImage(logo, x, y, widthLogo, heightLogo, null);
			g.drawRoundRect(x, y, widthLogo, heightLogo, 10, 10);
			g.setStroke(new BasicStroke(logoConfig.getBorder()));
			g.setColor(logoConfig.getBorderColor());
			g.drawRect(x, y, widthLogo, heightLogo);

			g.dispose();

			ImageIO.write(image, "jpeg", new File("D:/newPic.jpg"));
		} catch (Exception e) {
			e.printStackTrace();
		}
	}

	/**
	 * @为图片添加文字
	 * @param pressText
	 *            文字
	 * @param newImg
	 *            带文字的图片
	 * @param targetImg
	 *            需要添加文字的图片
	 * @param fontStyle
	 * @param color
	 * @param fontSize
	 * @param width
	 * @param heigh
	 */
	@SuppressWarnings("restriction")
	public static void pressText(String pressText, String newImg,
			String targetImg, int fontStyle, Color color, int fontSize,
			int width, int height) {

		// 计算文字开始的位置
		// x开始的位置：（图片宽度-字体大小*字的个数）/2
		int startX = (width - (fontSize * pressText.length())) / 2;
		// y开始的位置：图片高度-（图片高度-图片宽度）/2
		int startY = height - (height - width) / 2;

		try {
			File file = new File(targetImg);
			Image src = ImageIO.read(file);
			int imageW = src.getWidth(null);
			int imageH = src.getHeight(null);
			BufferedImage image = new BufferedImage(imageW, imageH,
					BufferedImage.TYPE_INT_RGB);
			Graphics g = image.createGraphics();
			g.drawImage(src, 0, 0, imageW, imageH, null);
			g.setColor(color);
			g.setFont(new Font(null, fontStyle, fontSize));
			g.drawString(pressText, startX, startY);
			g.dispose();

			FileOutputStream out = new FileOutputStream(newImg);
			ImageIO.write(image, "JPEG", out);
			JPEGImageEncoder encoder = JPEGCodec.createJPEGEncoder(out);
			encoder.encode(image);
			out.close();
			System.out.println("image press success");
		} catch (Exception e) {
			System.out.println(e);
		}
	}
	/**
	 * 
	 * @param content	二维码内容(到时候是一个网址加sellerID)
	 * @param eqCodePath 生成二维码地址(无logo)
	 * @param logoPath   logo地址
	 * @param text	二维码附加信息（文字）
	 * @param targetImage logo加文字的二维码
	 */
	@SuppressWarnings("unchecked")
	public static void createQRcode(String content,String eqCodePath,String logoPath,String text,String targetImage) {
		 try {
	            //二维码表示的内容
	            //content = "http://www.cnblogs.com/";
	            
	            //存放logo的文件夹
			 	//String path = "D://";

	            MultiFormatWriter multiFormatWriter = new MultiFormatWriter();

	            @SuppressWarnings("rawtypes")
	            Map hints = new HashMap();
	            
	            //设置UTF-8， 防止中文乱码
	            hints.put(EncodeHintType.CHARACTER_SET, "UTF-8");
	          /*  //设置二维码四周白色区域的大小
	            hints.put(EncodeHintType.MARGIN,1);*/
	            //设置二维码的容错性
	            hints.put(EncodeHintType.ERROR_CORRECTION, ErrorCorrectionLevel.H); 
	            
	            //width:图片完整的宽;height:图片完整的高
	            //因为要在二维码下方附上文字，所以把图片设置为长方形（高大于宽）
	            int width = 400;
	            int height = 450;
	            
	            //画二维码，记得调用multiFormatWriter.encode()时最后要带上hints参数，不然上面设置无效
	            BitMatrix bitMatrix = multiFormatWriter.encode(content, BarcodeFormat.QR_CODE, width, height, hints);
	            
	            //qrcFile用来存放生成的二维码图片（无logo，无文字）
	            File qrcFile = new File(eqCodePath);
	            //logoFile用来存放带有logo的二维码图片（二维码+logo，无文字）
	            //File logoFile = new File(logoPath);
	            
	            //开始画二维码
	            MatrixToImageWriter.writeToFile(bitMatrix, "jpg", qrcFile);
	            System.out.println("====二维码生成成功=====");
	            //在二维码中加入图片
	           // LogoConfig logoConfig = new LogoConfig(); //LogoConfig中设置Logo的属性
	            //addLogo_QRCode(qrcFile, logoFile, logoConfig);
	            
	    
	            //int font = 18; //字体大小
	            //int fontStyle = 1; //字体风格
	            
	            //用来存放带有logo+文字的二维码图片
	            //String newImageWithText = "f:/imageWithText.jpg"; 
	            //带有logo的二维码图片
	            //String targetImage = "D:/newPic.jpg";
	            //附加在图片上的文字信息
	            //text = "易聚客平台";

	            //在二维码下方添加文字（文字居中）
	            //pressText(text, newImageWithText, targetImage, fontStyle, Color.BLUE, font,  width,  height) ;

	        } catch (Exception e) {
	            e.printStackTrace();
	        }

	}
	
	
	public static void main(String args[]) {
        try {
        	createQRcode("www.baidu.com", "F:\\qr2.jpg", "", "", "");

           

        } catch (Exception e) {
            e.printStackTrace();
        }
    }
}