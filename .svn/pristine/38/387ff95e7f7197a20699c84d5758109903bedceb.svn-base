package com.prj.utils.encryption;

import java.security.Key;

import org.apache.shiro.codec.Hex;
import org.apache.shiro.crypto.AesCipherService;
import org.apache.shiro.crypto.SecureRandomNumberGenerator;
import org.apache.shiro.crypto.hash.DefaultHashService;
import org.apache.shiro.crypto.hash.HashRequest;
import org.apache.shiro.util.ByteSource;
import org.apache.shiro.util.SimpleByteSource;
import org.bouncycastle.crypto.tls.EncryptionAlgorithm;

import com.prj.utils.ping.PayConfiger;

/**
 * @author: Fengc
 * @date:2017-8-25 下午4:26:04
 * @version :0.0.1
 * @dis:
 */
public class ShiroEncryption {

	public static String encryption(String orderNo, String publicKey) {
		DefaultHashService hashService = new DefaultHashService();
		hashService.setHashAlgorithmName("SHA-1024");
		hashService.setPrivateSalt(new SimpleByteSource(publicKey)); // 私盐，默认无
		hashService.setGeneratePublicSalt(true);// 是否生成公盐，默认false
		hashService.setRandomNumberGenerator(new SecureRandomNumberGenerator());// 用于生成公盐。
		hashService.setHashIterations(1); // 生成Hash值的迭代次数
		HashRequest request = new HashRequest.Builder().setAlgorithmName("MD5")
				.setSource(ByteSource.Util.bytes(orderNo))
				.setSalt(ByteSource.Util.bytes("1024")).setIterations(2)
				.build();
		String hex = hashService.computeHash(request).toHex();
		return hex;
	}

	public static boolean validate(String hexo, String orderNo) {
		String hex = encryption(orderNo, PayConfiger.hookspublickey);
		if (hex.equals(hexo)) {
			return true;
		} else {
			return false;
		}
	}
}
